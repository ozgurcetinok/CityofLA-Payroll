}
return(result)
}
find(vec5,3)
find <- function(vector,number) {
result=c()
for (x in seq(1,length(vector))){
if (vector[x] == number){
result.append(x)
}
}
return(result)
}
find(vec5,3)
find <- function(vector,number) {
result=c()
for (x in seq(1,length(vector))){
if (vector[x] == number){
result=c(result,x)
}
}
return(result)
}
find(vec5,3)
library(lubridate)
df$date <- as.Date(df$date)
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
for (i in Days){
if (wday(i) == "Saturday"){
if (format(as.Date(i,format="%Y-%m-%d"), "%d")){
i
}
}
}
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
Days
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday[Days[0]]
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
Days[0]
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
Days[1]
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday(Days[1])
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
Days[1]
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday(Days[1])
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday(Days[2])
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday(Days[3])
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday("2018-01-01")
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday("2016-01-01")
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday("2016-01-02")
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday("2016-01-09")
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday("2016-01-16")
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
for (i in Days){
if (wday(i) == 7){
if (format(as.Date(i,format="%Y-%m-%d"), "%d")){
i
}
}
}
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
for (i in Days){
if (wday(i) == 7){
if (format(as.Date(i,format="%Y-%m-%d"), "%d")%%2 !=0){
i
}
}
}
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
for (i in Days){
if (wday(i) == 7){
if (format(as.Date(i,format="%Y-%m-%d"), "%d")%%2 !=0){
x=c(x,i)
}
}
}
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
for (i in Days){
if (wday(i) == 7){
if (format(as.Date(i,format="%Y-%m-%d"), "%d")%%2 !=0){
x=c(x,i)
}
}
}
x
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
for (i in Days){
i
}
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
for (i in Days){
i
}
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
for (i in Days){
x=c(x,i)
}
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
for (i in Days){
x=c(x,i)
}
x
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
for (i in Days){
x=c(x,i)
}
Days
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
for (i in Days){
x=c(x,i)
}
x
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday("2016-01-01")
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday("2016-01-01",label=TRUE)
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday("2016-01-01",label=TRUE)
which(wday(Days)==7)
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday("2016-01-01",label=TRUE)
Days[which(wday(Days)==7)]
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
wday("2016-01-01",label=TRUE)
Days[which(wday(Days)==7)]
day("2016-01-01")
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
Days[which(wday(Days)==7) && which(day(Days))%%2!=0]
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
Days[which((wday(Days)==7) && (day(Days))%%2!=0)]
library(lubridate)
x = c()
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
newdays = Days[which(wday(Days)==7)]
newdays[which(day(newdays)%%2!=0)]
library(lubridate)
Days = seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
newdays = Days[which(wday(Days)==7)]
newdays[which(day(newdays)%%2!=0)]
library(lubridate)
Rossi = seq(as.Date("1950-11-25"), as.Date("2050-11-25"), by="years")
#newdays = Days[which(wday(Days)==7)]
#newdays[which(day(newdays)%%2!=0)]
Rossi
library(lubridate)
Rossi = seq(as.Date("1950-11-25"), as.Date("2050-11-25"), by="years")
#newdays = Days[which(wday(Days)==7)]
#newdays[which(day(newdays)%%2!=0)]
news("2018-11-8")
library(lubridate)
Rossi = seq(as.Date("1950-11-25"), as.Date("2050-11-25"), by="years")
#newdays = Days[which(wday(Days)==7)]
#newdays[which(day(newdays)%%2!=0)]
wday("2018-11-8")
library(lubridate)
Rossi = seq(as.Date("1950-11-25"), as.Date("2050-11-25"), by="years")
years(Rossi[which(wday(Rossi)==5)])
Rossi = seq(as.Date("1950-11-25"), as.Date("2050-11-25"), by="years")
Rossi[which(wday(Rossi)==5)]
Rossi = seq(as.Date("1950-11-25"), as.Date("2050-11-25"), by="years")
Rossi[which(wday(Rossi)==5)]
format(as.Date(Rossi, format="%Y-%m-%d"),"%Y")
Rossi = seq(as.Date("1950-11-25"), as.Date("2050-11-25"), by="years")
Rossi = Rossi[which(wday(Rossi)==5)]
format(as.Date(Rossi, format="%Y-%m-%d"),"%Y")
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
OilChange[1]
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
OilChange[91]
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
for (x in seq(1,12)){
OilChange[1+90*x]
}
x=c()
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
for (x in seq(1,12)){
x=c(x,OilChange[1+90*x])
}
x
X=c()
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
for (x in seq(1,12)){
X=c(x,OilChange[1+90*x])
}
X
Dates=c()
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
for (x in seq(1,12)){
Dates=c(x,OilChange[1+90*x])
}
Dates
Dates=c()
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
for (x in seq(1,12)){
Dates=c(Dates,OilChange[1+90*x])
}
Dates
Dates=c()
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
for (x in seq(1,12)){
Dates=c(Dates,as.Date(OilChange[1+90*x]))
}
Dates
Dates=c()
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
for (x in seq(1,12)){
Dates=c(Dates,as.Date(OilChange[1+90*x]))
}
as.Date(Dates)
Dates=c()
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
for (x in seq(1,12)){
Dates=c(Dates,as.Date(OilChange[1+90*x]))
}
as.Date(Dates, format="%Y-%m-%d")
Dates=c()
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
for (x in seq(1,12)){
Dates=c(Dates,as.Date(OilChange[1+90*x]))
}
Dates
OilChange[91]
OilChange[181]
OilChange[271]
ee=c(OilChange[91],OilChange[181])
ee
OilChange = seq(as.Date("2018-11-1"), as.Date("2022-01-01"), by="days")
for (x in seq(1,12)){
print(OilChange[1+90*x])
}
setwd("/Users/ozgurcetinok/Desktop/Fall2018/Datathon")
data = read.csv("City_Employee_Payroll.csv", header = TRUE)
View(data)
#Look at Department Title, no nulls
new_DF = data[is.na(data$Department.Title),]
#Look at Department Title, no nulls
new_DF = data[is.na(data$Year),]
#Look at Payroll Department, many nulls
new_DF = data[is.na(data$Payroll.Department),]
View(new_DF)
#All the null Payroll Department Values are from DWP
#We will fix that by assigning a new Payroll Dept to them.For example 8703
data$Payroll.Department[is.na(data$Payroll.Department)] = "8703"
new_DF = data[is.na(data$Payroll.Department),]
#Payroll Dept is fine right now.
#Look at Record Number, no nulls
new_DF = data[is.na(data$Record.Number),]
#Look at Job Class Title, no nulls
new_DF = data[is.na(data$Job.Class.Title),]
#Look at Employment Type, no nulls
new_DF = data[is.na(data$Employment.Type),]
#Hourly or Event Rate Missing for DWP AGAIN!
new_DF = data[is.na(data$Hourly.or.Event.Rate),]
View(new_DF)
173.53*2088
#For Full time 2088, part time same.
new_DF = data[is.na(data$Hourly.or.Event.Rate),]
X$Hourly.or.Event.Rate = ifelse(is.na(X$Hourly.or.Event.Rate),X$Projected.Annual.Salary/2088,X$Hourly.or.Event.Rate)
#Hourly or Event Rate Missing for DWP AGAIN!
new_DF = data[is.na(data$Hourly.or.Event.Rate),]
X = subset(data,data$Year!="2018")
Y_2018 = subset(data,data$Year=="2018")
#For Full time 2088, part time same.
new_DF = data[is.na(data$Hourly.or.Event.Rate),]
X$Hourly.or.Event.Rate = ifelse(is.na(X$Hourly.or.Event.Rate),X$Projected.Annual.Salary/2088,X$Hourly.or.Event.Rate)
#For Full time 2088, part time same.
new_DF = data[is.na(data$Hourly.or.Event.Rate),]
#For Full time 2088, part time same.
new_DF = data[is.na(X$Hourly.or.Event.Rate),]
#Fixed the issue
#Projected Annual Salary, no Nulls
new_DF = newdata[is.na(newdata$Projected.Annual.Salary),]
#Q, no null luckily
new_DF = X[is.na(X$Q1.Payments),]
new_DF = X[is.na(X$Q2.Payments),]
new_DF = X[is.na(X$Q3.Payments),]
new_DF = X[is.na(X$Q4.Payments),]
#Payments Over Base Pay, there are nulls. They should be zero.
new_DF = X[is.na(X$Payments.Over.Base.Pay),]
X$Payments.Over.Base.Pay = ifelse(is.na(X$Payments.Over.Base.Pay),X$Total.Payments-X$Base.Pay,X$Payments.Over.Base.Pay)
new_DF = X[is.na(X$X..Over.Base.Pay),]
X$X..Over.Base.Pay = ifelse(is.na(X$X..Over.Base.Pay),0,X$X..Over.Base.Pay)
#There are nulls, will drop the column
#Total Payments, No nulls
new_DF = X[is.na(X$Total.Payments),]
#Base Pay, No nulls
new_DF = X[is.na(X$Base.Pay),]
#Permanent Bonus Pay
new_DF = X[is.na(X$Permanent.Bonus.Pay),]
new_DF = X[is.na(X$Longevity.Bonus.Pay),]
new_DF = X[is.na(X$Temporary.Bonus.Pay),]
new_DF = X[is.na(X$Lump.Sum.Pay),]
View(new_DF)
#Make it equal to zero.
X$Lump.Sum.Pay = ifelse(is.na(X$Lump.Sum.Pay),0,X$Lump.Sum.Pay)
#OT
new_DF = X[is.na(X$Overtime.Pay),]
X$Overtime.Pay = ifelse(is.na(X$Overtime.Pay),0,X$Overtime.Pay)
#Other Pay
new_DF = X[is.na(X$Other.Pay...Adjustments),]
#Other Payroll eXp
new_DF = X[is.na(X$Other.Pay..Payroll.Explorer.),]
#MOU
new_DF = X[is.na(X$MOU),]
#MOU Title
new_DF = X[is.na(X$MOU.Title),]
#FMS Dept
new_DF = X[is.na(X$FMS.Department),]
#Job Class
new_DF = X[is.na(X$Job.Class),]
#Pay Grade
new_DF = X[is.na(X$Pay.Grade),]
#Avg Health Cost
new_DF = X[is.na(X$Average.Health.Cost),]
new_DF = X[is.na(X$Average.Dental.Cost),]
new_DF = X[is.na(X$Average.Basic.Life),]
new_DF = X[is.na(X$Average.Benefit.Cost),]
#Benefits Plan
new_DF = X[is.na(X$Benefits.Plan),]
#Job Class Link
new_DF = X[is.na(X$Job.Class.Link),]
#DATA CLEANED
summary(X)
table(is.na(X))
#Removing negatives
X = subset(X,X$Total.Payments>=0)
#Removing negatives
X = subset(X,X$Total.Payments>=0)
X = subset(X,X$Other.Pay..Payroll.Explorer. >=0)
X = subset(X,X$Q1.Payments >=0)
X = subset(X,X$Q2.Payments >=0)
X = subset(X,X$Overtime.Pay >=0)
X = subset(X,X$Q3.Payments >=0)
X = subset(X,X$Q4.Payments >=0)
X = subset(X,X$Payments.Over.Base.Pay >=0)
X = subset(X,X$X..Over.Base.Pay >=0)
X = subset(X,X$Base.Pay >=0)
X = subset(X,X$Permanent.Bonus.Pay >=0)
X = subset(X,X$Longevity.Bonus.Pay >=0)
X = subset(X,X$Temporary.Bonus.Pay >=0)
X = subset(X,X$Other.Pay...Adjustments >=0)
summary(X)
X$Job.Class.Title = tolower(X$Job.Class.Title)
X$Employment.Type = tolower(X$Employment.Type)
X$MOU.Title = tolower(X$MOU.Title)
X$Department.Title = tolower(X$Department.Title)
summary(X)
View(X)
Y_2018$Job.Class.Title = tolower(Y_2018$Job.Class.Title)
Y_2018$Employment.Type = tolower(Y_2018$Employment.Type)
Y_2018$MOU.Title = tolower(Y_2018$MOU.Title)
Y_2018$Department.Title = tolower(Y_2018$Department.Title)
View(X)
View(Y_2018)
#READING CLEANED DATA
setwd("/Users/ozgurcetinok/Desktop/Fall2018/Datathon")
data = read.csv("CleanData.csv", header = TRUE)
data_2018= read.csv("CleanData_2018.csv", header = TRUE)
#CORRELATION PLOTS
Numeric_= dplyr::select_if(data, is.numeric)
library("corrplot")
corr_ = cor(Numeric_)
quartz()
corrplot(corr_, method="circle") #pie,number,color
quartz()
corrplot(corr_, method="pie") #pie,number,color
#DROPPING LOTS OF COLUMNS TO BUILD A BENCHMARK MODEL IN PANEL
drops = c("X","Payroll.Department","Benefits.Plan","Pay.Grade","MOU.Title","X..Over.Base.Pay","Q3.Payments","Q4.Payments","Row.ID","MOU","FMS.Department","Job.Class","Job.Class.Link","Average.Health.Cost","Average.Dental.Cost","Average.Basic.Life","Permanent.Bonus.Pay","Longevity.Bonus.Pay","Temporary.Bonus.Pay","Lump.Sum.Pay","Permanent.Bonus.Pay","Other.Pay...Adjustments","Payments.Over.Base.Pay","Base.Pay")
benchmark = data[ , !(names(data) %in% drops)]
benchmark_2018 = data_2018[ , !(names(data_2018) %in% drops)]
View(benchmark)
summary(benchmark)
#Remove some categorical for now
dropcat = c("Department.Title","Job.Class.Title")
benchmark_nocat = benchmark[ , !(names(benchmark) %in% dropcat)]
benchmark_2018_nocat = benchmark_2018[ , !(names(benchmark_2018) %in% dropcat)]
View(benchmark_nocat)
#Dealing With Left Categorical Variable
library(dummies)
df=dummy.data.frame(benchmark_nocat,names=c("Employment.Type"),sep="_")
df_2018=dummy.data.frame(benchmark_2018_nocat,names=c("Employment.Type"),sep="_")
df=df[!duplicated(df[c("Record.Number","Year")]),]
df_2018=df_2018[!duplicated(df_2018[c("Record.Number","Year")]),]
View(df)
library("foreign")
library("plm")
data.p = plm.data(df,index=c("Record.Number","Year"))
data.p_2018 = plm.data(df_2018,index=c("Record.Number","Year"))
data.p = transform(data.p, H1= data.p$Q1.Payments+data.p$Q2.Payments )
View(data.p)
between =  plm(H1 ~  lag(Projected.Annual.Salary,1) + lag(Total.Payments,1) +
lag(Overtime.Pay,1) + lag(Other.Pay..Payroll.Explorer.,1) + lag(Average.Benefit.Cost,1), data=data.p, model= "between")
summary(between)
#Checking Everything for 2016-2017 to see if it works
data_17 = subset(data.p,data.p$Year=="2017")
data_16 = subset(data.p,data.p$Year=="2016")
notincommon_17 = setdiff(data_17$Record.Number, data_16$Record.Number)
notincommon_16 = setdiff(data_16$Record.Number, data_17$Record.Number)
coefficients
coefficients = coef(between)
coefficients = coef(between)
coefficients
#Checking the accuracy for 2016-2017
data_17 = subset(data.p,data.p$Year=="2017")
data_16 = subset(data.p,data.p$Year=="2016")
data_17 = data_17[!(data_17$Record.Number %in% notincommon_17),]
data_16 = data_16[!(data_16$Record.Number %in% notincommon_16),]
data_17$Record.Number = lapply(data_17$Record.Number, as.character)
data_16$Record.Number = lapply(data_16$Record.Number, as.character)
data17=data_17
data17 = transform(data17, Projected.lag= if(identical(data_16$Record.Number,data17$Record.Number)) (data_16$Projected.Annual.Salary))
data17 = transform(data17, Totalpay.lag= if(identical(data_16$Record.Number,data17$Record.Number)) (data_16$Total.Payments))
data17 = transform(data17, OT.lag= if(identical(data_16$Record.Number,data17$Record.Number)) (data_16$Overtime.Pay))
data17 = transform(data17, Other.lag= if(identical(data_16$Record.Number,data17$Record.Number)) (data_16$Other.Pay..Payroll.Explorer.))
data17 = transform(data17, Benefit.lag= if(identical(data_16$Record.Number,data17$Record.Number)) (data_16$Average.Benefit.Cost))
data17 = transform(data17, H1.lag= if(identical(data_16$Record.Number,data17$Record.Number)) (data_16$H1.Payments))
data17 = transform(data17, Q1.lag= if(identical(data_16$Record.Number,data17$Record.Number)) (data_16$Q1.Payments))
data17 = transform(data17, Q2.lag= if(identical(data_16$Record.Number,data17$Record.Number)) (data_16$Q2.Payments))
View(data17)
View(data17)
data17 = transform(data17, H1.Forecast=coefficients[1]+coefficients[2]*data17$Projected.lag+coefficients[3]*data17$Totalpay.lag+coefficients[4]*data17$OT.lag+coefficients[5]*data17$Other.lag+coefficients[6]*data17$Benefit.lag)
library(forecast)
accuracy(data17$H1.Forecast,data17$H1)
#Checking the Accuracy level on 2017 data
err_= data17$H1 - data17$H1.Forecast
err__= err_[err_ <500]
err__=err__[err__>-500]
length(err__)/length(err_)
#Applying Model to 2018
notincommon_17 = setdiff(data_17$Record.Number, data.p_2018$Record.Number)
notincommon_18 = setdiff(data.p_2018$Record.Number, data_17$Record.Number)
data_17 = data_17[!(data_17$Record.Number %in% notincommon_17),]
data.p_2018 = data.p_2018[!(data.p_2018$Record.Number %in% notincommon_18),]
data_17$Record.Number = lapply(data_17$Record.Number, as.character)
data.p_2018$Record.Number = lapply(data.p_2018$Record.Number, as.character)
data.p_2018 = transform(data.p_2018, Projected.lag= if(identical(data_17$Record.Number,data.p_2018$Record.Number)) (data_17$Projected.Annual.Salary))
data.p_2018 = transform(data.p_2018, Totalpay.lag= if(identical(data_17$Record.Number,data.p_2018$Record.Number)) (data_17$Total.Payments))
data.p_2018 = transform(data.p_2018, OT.lag= if(identical(data_17$Record.Number,data.p_2018$Record.Number)) (data_17$Overtime.Pay))
data.p_2018 = transform(data.p_2018, Other.lag= if(identical(data_17$Record.Number,data.p_2018$Record.Number)) (data_17$Other.Pay..Payroll.Explorer.))
data.p_2018 = transform(data.p_2018, Benefit.lag= if(identical(data_17$Record.Number,data.p_2018$Record.Number)) (data_17$Average.Benefit.Cost))
coefficients = coef(between)
data.p_2018 = transform(data.p_2018, H1.Forecast=coefficients[1]+coefficients[2]*data.p_2018$Projected.lag+coefficients[3]*data.p_2018$Totalpay.lag+coefficients[4]*data.p_2018$OT.lag+coefficients[5]*data.p_2018$Other.lag+coefficients[6]*data.p_2018$Benefit.lag)
towrite = read.csv("payroll_2018.csv", header = TRUE)
drop = c("X")
towrite = towrite[ , !(names(towrite) %in% drop)]
dropp = c("Year","Employment.Type_full.time","Employment.Type_part.time","Employment.Type_per.event","Projected.lag","Totalpay.lag","OT.lag","Other.lag","Benefit.lag")
final = data.p_2018[ , !(names(data.p_2018) %in% dropp)]
final$Record.Number <- as.numeric(as.character(final$Record.Number))
aaa= merge(towrite, final, by = "Record.Number") # NA's match, so 6 rows
fdrop = c("Q1.Q2Payments.2018")
final_pred = aaa[ , !(names(aaa) %in% fdrop)]
colnames(final_pred) <- c("Record.Number", "Q1.Q2Payments.2018")
View(final_pred)
